name: Build Android APK

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # Standard Android SDK locations
      ANDROID_SDK_ROOT: $HOME/Android/Sdk
      ANDROID_HOME:     $HOME/Android/Sdk

      # Keystore settings
      KEY_ALIAS: swamprabbit
      KEY_DNAME: "CN=Swamp Rabbit, OU=Dev, O=You, L=City, ST=State, C=US"

    steps:
      # 1. Check out your code
      - name: Checkout repo
        uses: actions/checkout@v4

      # 2. Install Node.js & JS deps
      - name: Setup Node & Install JS deps
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - run: yarn install --frozen-lockfile

      # 3. Install JDK 17
      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'

      # 4. Download & unpack legacy SDK Tools, then install SDK packages
      - name: Install Android SDK Tools & packages
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip

          # Prepare SDK root & suppress sdkmanager warnings
          mkdir -p $ANDROID_SDK_ROOT
          mkdir -p $HOME/.android
          touch    $HOME/.android/repositories.cfg

          # Download legacy SDK Tools bundle
          wget https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip \
            -O /tmp/sdk-tools.zip
          unzip /tmp/sdk-tools.zip -d $ANDROID_SDK_ROOT

          # Define the absolute path to sdkmanager
          SDKMGR="$ANDROID_SDK_ROOT/tools/bin/sdkmanager"

          # Install platform‑tools, API 33, build‑tools 33.0.0
          $SDKMGR "platform-tools" "platforms;android-33" "build-tools;33.0.0"
          yes | $SDKMGR --licenses

      # 5. Generate & export a random keystore password
      - name: Generate keystore password
        run: echo "KEYSTORE_PASS=$(openssl rand -hex 16)" >> $GITHUB_ENV

      # 6. Create an ephemeral keystore
      - name: Create ephemeral keystore
        run: |
          mkdir -p android/app
          keytool -genkeypair \
            -v \
            -keystore android/app/my-release-key.jks \
            -alias $KEY_ALIAS \
            -keyalg RSA \
            -keysize 2048 \
            -validity 10000 \
            -storepass $KEYSTORE_PASS \
            -keypass   $KEYSTORE_PASS \
            -dname     "$KEY_DNAME"

      # 7. Wire the keystore into Gradle
      - name: Configure Gradle signing
        run: |
          cat <<EOF >> android/gradle.properties
          MYAPP_UPLOAD_STORE_FILE=my-release-key.jks
          MYAPP_UPLOAD_KEY_ALIAS=$KEY_ALIAS
          MYAPP_UPLOAD_STORE_PASSWORD=$KEYSTORE_PASS
          MYAPP_UPLOAD_KEY_PASSWORD=$KEYSTORE_PASS
          EOF

      # 8. Ensure the Gradle wrapper is executable
      - name: Make gradlew executable
        run: chmod +x android/gradlew

      # 9. Build the release APK
      - name: Build Release APK
        working-directory: android
        run: ./gradlew clean assembleRelease

      # 10. Upload the signed APK artifact
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release.apk
          path: android/app/build/outputs/apk/release/app-release.apk
