name: Android APK (manual SDK install + secure build)

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write

env:
  KEY_ALIAS: swamprabbit
  ANDROID_SDK_ROOT: /usr/local/lib/android/sdk

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Install only the base SDK tools & platform-tools
      - name: Setup Android SDK tools
        uses: android-actions/setup-android@v3
        with:
          accept-android-sdk-licenses: true
          packages: ''                          # skip extras here

      # 2Ô∏è‚É£ Manually install API¬†33 platform + build-tools¬†33.0.2
      - name: Manually install Android¬†33 & build-tools¬†33.0.2
        run: |
          set -eux
          yes | "${ANDROID_SDK_ROOT}/cmdline-tools/16.0/bin/sdkmanager" --sdk_root="${ANDROID_SDK_ROOT}" \
            "platform-tools" \
            "platforms;android-33" \
            "build-tools;33.0.2"
          # Verify installation
          "${ANDROID_SDK_ROOT}/cmdline-tools/16.0/bin/sdkmanager" --list | grep "33"

      # 3Ô∏è‚É£ Checkout your code (includes your custom App.tsx)
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 4Ô∏è‚É£ Bootstrap & prebuild Expo native (preserve App.tsx)
      - name: Bootstrap & prebuild Expo native project
        run: |
          set -euo pipefail
          echo "::notice::Bootstrapping Expo native project‚Ä¶"

          # Backup existing App.tsx so scaffold doesn't overwrite it
          if [ -f App.tsx ]; then
            cp App.tsx App.tsx.bak
          fi

          APP_NAME="SwampRabbitApp"
          TEMPLATE="expo-template-blank-typescript"

          # Create managed project
          npx create-expo-app@latest "$APP_NAME" -t "$TEMPLATE" --yes --no-install
          shopt -s dotglob
          mv "$APP_NAME"/* .
          rm -rf "$APP_NAME"

          # Restore original App.tsx
          if [ -f App.tsx.bak ]; then
            mv App.tsx.bak App.tsx
          fi

          # Install dependencies
          yarn install --frozen-lockfile
          yarn add \
            @react-native-async-storage/async-storage \
            react-native-encrypted-storage \
            react-native-sqlite-storage \
            react-native-linear-gradient \
            @react-native-community/slider \
            react-native-markdown-display \
            react-native-vector-icons \
            react-native-image-picker \
            @react-native-clipboard/clipboard \
            react-native-config \
            react-native-fs \
            @react-navigation/native \
            @react-navigation/bottom-tabs \
            react-native-device-info \
            axios \
            crypto-js

          # Generate native projects
          npx expo prebuild --no-install --non-interactive

      # 5Ô∏è‚É£ Set up Node.js (cache Yarn)
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: yarn

      - run: yarn install --frozen-lockfile

      # 6Ô∏è‚É£ Set up Java 17
      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      # 7Ô∏è‚É£ Install Gradle wrapper in android/
      - name: Install Gradle wrapper
        working-directory: android
        run: ./gradlew wrapper

      # 8Ô∏è‚É£ Generate a fresh keystore each run
      - name: Generate signing keystore
        run: |
          STORE_PASS=$(openssl rand -hex 16)
          KEY_PASS=$(openssl rand -hex 16)
          echo "STORE_PASS=$STORE_PASS" >> "$GITHUB_ENV"
          echo "KEY_PASS=$KEY_PASS"     >> "$GITHUB_ENV"

          mkdir -p android/app
          keytool -genkeypair -v \
            -keystore android/app/release.keystore \
            -alias "$KEY_ALIAS" \
            -keyalg RSA -keysize 2048 -validity 10000 \
            -storepass "$STORE_PASS" \
            -keypass  "$KEY_PASS" \
            -dname "CN=SwampRabbit, OU=Dev, O=Booper, L=Greenville, S=SC, C=US"

      # 9Ô∏è‚É£ Inject signing into Gradle
      - name: Configure Gradle signing
        run: |
          cat <<EOF >> android/gradle.properties
          MYAPP_UPLOAD_STORE_FILE=release.keystore
          MYAPP_UPLOAD_KEY_ALIAS=${{ env.KEY_ALIAS }}
          MYAPP_UPLOAD_STORE_PASSWORD=${{ env.STORE_PASS }}
          MYAPP_UPLOAD_KEY_PASSWORD=${{ env.KEY_PASS }}
          EOF

      # üîü Build & upload the signed APK
      - name: Make gradlew executable
        run: chmod +x android/gradlew

      - name: Build release APK
        working-directory: android
        run: ./gradlew clean assembleRelease --no-daemon

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: swamp-rabbit-oracle.apk
          path: android/app/build/outputs/apk/release/app-release.apk
